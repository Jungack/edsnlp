[project]
name = "edsnlp"
description = "A set of spaCy components to extract information from clinical notes written in French"
authors = [
    { name = "Data Science - DSN APHP", email = "perceval.wajsburt-ext@aphp.fr" }
]
license = { file = "LICENSE" }
readme = "README.md"
requires-python = ">=3.7.1"
dynamic = ['version']
dependencies = [
    "decorator",
    "loguru",
    "pendulum>=2.1.2",
    "pydantic>=1.8.2,<2.0.0",
    "pysimstring>=1.2.1",
    "regex",
    "rich>=12.0.0",
    "scikit-learn>=1.0.0",
    "spacy>=3.1,<4.0.0",
    "thinc>=8.0.14",
    "tqdm",
    "safetensors>=0.3.0",
    "umls-downloader>=0.1.1",
    "numpy>=1.15.0,<1.23.2; python_version<'3.8'",
    "numpy>=1.15.0; python_version>='3.8'",
    "pandas>=1.1.0; python_version<'3.8'",
    "pandas>=1.4.0; python_version>='3.8'",
]
[project.optional-dependencies]
dev = [
    "black>=22.3.0,<23.0.0",
    "fastapi",
    "flake8==3.9.2",
    "koalas>=1.8.1; python_version<='3.10'",
    "pre-commit>=2.0.0; python_version<'3.8'",
    "pre-commit>=2.21.0; python_version>='3.8'",
    "pyspark",
    "pytest>=7.1.0,<8.0.0",
    "pytest-cov>=3.0.0,<4.0.0",
    "pytest-html>=3.1.1,<4.0.0",
    "torch>=1.0.0",
]
setup = [
    "mlconjug3<3.9.0",
    "typer"
]
docs = [
    "mike==1.1.2",
    "mkdocs-autorefs~=0.4.1",
    "mkdocs-bibtex==2.8.5",
    "mkdocs-charts-plugin==0.0.8",
    "mkdocs-img2fig-plugin==0.9.3",
    "mkdocs-material~=9.1.0",
    "mkdocs-section-index==0.3.4",
    "mkdocstrings~=0.20.0",
    "mkdocstrings-python~=0.8.3",
]
trainable = [
    "torch>=1.0.0",
]

[project.urls]
"Source Code" = "https://github.com/aphp/edsnlp"
"Documentation" = "https://aphp.github.io/edsnlp"
"Demo" = "https://aphp.github.io/edsnlp/demo"
"Bug Tracker" = "https://github.com/aphp/edsnlp/issues"

[tool.setuptools.dynamic]
version = { attr = "edsnlp.__version__" }

[tool.setuptools.package-data]
"edsnlp" = [
    "*.pyx",
    "*.pxd",
    "*.pxi",
    "resources/*.csv",
    "resources/*.json",
    "resources/*.csv.gz",
    "resources/*.json.gz",
]

[tool.setuptools.packages.find]
where = ["."]

[project.entry-points."spacy_factories"]
"eds.accents"            = "edsnlp.pipelines.core.normalizer.accents.factory:create_component"
"eds.context"            = "edsnlp.pipelines.core.context.factory:create_component"
"eds.contextual-matcher" = "edsnlp.pipelines.core.contextual_matcher.factory:create_component"
"eds.endlines"           = "edsnlp.pipelines.core.endlines.factory:create_component"
"eds.lowercase"          = "edsnlp.pipelines.core.normalizer.lowercase.factory:create_component"
"eds.matcher"            = "edsnlp.pipelines.core.matcher.factory:create_component"
"eds.normalizer"         = "edsnlp.pipelines.core.normalizer.factory:create_component"
"eds.pollution"          = "edsnlp.pipelines.core.normalizer.pollution.factory:create_component"
"eds.quotes"             = "edsnlp.pipelines.core.normalizer.quotes.factory:create_component"
"eds.sentences"          = "edsnlp.pipelines.core.sentences.factory:create_component"
"eds.terminology"        = "edsnlp.pipelines.core.terminology.factory:create_component"

"eds.adicap"             = "edsnlp.pipelines.ner.adicap.factory:create_component"
"eds.ccmu"               = "edsnlp.pipelines.ner.scores.emergency.ccmu.factory:create_component"
"eds.charlson"           = "edsnlp.pipelines.ner.scores.charlson.factory:create_component"
"eds.cim10"              = "edsnlp.pipelines.ner.cim10.factory:create_component"
"eds.covid"              = "edsnlp.pipelines.ner.covid.factory:create_component"
"eds.drugs"              = "edsnlp.pipelines.ner.drugs.factory:create_component"
"eds.gemsa"              = "edsnlp.pipelines.ner.scores.emergency.gemsa.factory:create_component"
"eds.priority"           = "edsnlp.pipelines.ner.scores.emergency.priority.factory:create_component"
"eds.sofa"               = "edsnlp.pipelines.ner.scores.sofa.factory:create_component"
"eds.tnm"                = "edsnlp.pipelines.ner.scores.tnm.factory:create_component"
"eds.umls"               = "edsnlp.pipelines.ner.umls.factory:create_component"

"eds.family"             = "edsnlp.pipelines.qualifiers.family.factory:create_component"
"eds.history"            = "edsnlp.pipelines.qualifiers.history.factory:create_component"
"eds.hypothesis"         = "edsnlp.pipelines.qualifiers.hypothesis.factory:create_component"
"eds.negation"           = "edsnlp.pipelines.qualifiers.negation.factory:create_component"
"eds.reported_speech"    = "edsnlp.pipelines.qualifiers.reported_speech.factory:create_component"

"eds.consultation_dates" = "edsnlp.pipelines.misc.consultation_dates.factory:create_component"
"eds.dates"              = "edsnlp.pipelines.misc.dates.factory:create_component"
"eds.measurements"       = "edsnlp.pipelines.misc.measurements.factory:create_component"
"eds.reason"             = "edsnlp.pipelines.misc.reason.factory:create_component"
"eds.sections"           = "edsnlp.pipelines.misc.sections.factory:create_component"

"eds.nested_ner"         = "edsnlp.pipelines.trainable.nested_ner:create_component"

[project.entry-points."spacy_architectures"]
"eds.stack_crf_ner_model.v1" = "edsnlp.models.stack_crf_ner:create_model"

[project.entry-points."spacy_scorers"]
"eds.nested_ner_scorer.v1" = "edsnlp.pipelines.trainable.nested_ner:make_nested_ner_scorer"

[project.entry-points."spacy_languages"]
"eds" = "edsnlp.language:EDSLanguage"

[build-system]
requires = [
    "setuptools",
    "cython>=0.25,<3.0",
    "spacy>=3.2,<4.0",
    "numpy==1.15.0; python_version<='3.7'",
    "numpy==1.17.3; python_version=='3.8'",
    "numpy==1.19.3; python_version=='3.9' and (platform_system!='Darwin' or platform_machine!='arm64')",
    "numpy==1.21.0; python_version=='3.9' and platform_system=='Darwin' and platform_machine=='arm64'",
    "numpy==1.21.3; python_version=='3.10'",
    "numpy; python_version>='3.11'",
]
build-backend = "setuptools.build_meta"

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = true
ignore-nested-functions = false
ignore-nested-classes = true
ignore-setters = false
fail-under = 40
exclude = ["setup.py", "docs", "build", "tests"]
verbose = 0
quiet = false
whitelist-regex = []
color = true
omit-covered-files = false
# generate-badge = "."
# badge-format = "svg"

[tool.ruff]
exclude = [
    ".git",
    "__pycache__",
    "__init__.py",
    ".mypy_cache",
    ".pytest_cache",
    ".venv",
    "build",
]
ignore = []
line-length = 88
select = [
    "E",
    "F",
    "W",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.cibuildwheel]
skip = [
    "*p36-*", # Skip Python 3.6
    "pp*", # Skip PyPy
    "*-win32", # Skip 32-bit Windows
    "*-manylinux_i686", # Skip 32-bit Linux
    "*-win_arm64", # Skip experimental Windows on ARM
    "*-musllinux*", # Skip slow Linux
    "*-manylinux_aarch64", # Skip slow Linux
    "*-manylinux_ppc64le", # Skip slow Linux
    "*-manylinux_s390x", # Skip slow Linux
]

before-test = "pip install pytest"
test-command = "pytest {project}/tests/pipelines/test_pipelines.py"
